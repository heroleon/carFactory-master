package com.leon.carfixfactory.beanDao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.leon.carfixfactory.bean.WorkerInfo;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "WORKER_INFO".
*/
public class WorkerInfoDao extends AbstractDao<WorkerInfo, Long> {

    public static final String TABLENAME = "WORKER_INFO";

    /**
     * Properties of entity WorkerInfo.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property WorkerId = new Property(0, Long.class, "workerId", true, "_id");
        public final static Property AvatarPath = new Property(1, String.class, "avatarPath", false, "AVATAR_PATH");
        public final static Property WorkerName = new Property(2, String.class, "workerName", false, "WORKER_NAME");
        public final static Property WorkerBirthDay = new Property(3, String.class, "workerBirthDay", false, "WORKER_BIRTH_DAY");
        public final static Property WorkerPhone = new Property(4, String.class, "workerPhone", false, "WORKER_PHONE");
        public final static Property WorkerAddress = new Property(5, String.class, "workerAddress", false, "WORKER_ADDRESS");
    }


    public WorkerInfoDao(DaoConfig config) {
        super(config);
    }
    
    public WorkerInfoDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"WORKER_INFO\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: workerId
                "\"AVATAR_PATH\" TEXT," + // 1: avatarPath
                "\"WORKER_NAME\" TEXT," + // 2: workerName
                "\"WORKER_BIRTH_DAY\" TEXT," + // 3: workerBirthDay
                "\"WORKER_PHONE\" TEXT," + // 4: workerPhone
                "\"WORKER_ADDRESS\" TEXT);"); // 5: workerAddress
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"WORKER_INFO\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, WorkerInfo entity) {
        stmt.clearBindings();
 
        Long workerId = entity.getWorkerId();
        if (workerId != null) {
            stmt.bindLong(1, workerId);
        }
 
        String avatarPath = entity.getAvatarPath();
        if (avatarPath != null) {
            stmt.bindString(2, avatarPath);
        }
 
        String workerName = entity.getWorkerName();
        if (workerName != null) {
            stmt.bindString(3, workerName);
        }
 
        String workerBirthDay = entity.getWorkerBirthDay();
        if (workerBirthDay != null) {
            stmt.bindString(4, workerBirthDay);
        }
 
        String workerPhone = entity.getWorkerPhone();
        if (workerPhone != null) {
            stmt.bindString(5, workerPhone);
        }
 
        String workerAddress = entity.getWorkerAddress();
        if (workerAddress != null) {
            stmt.bindString(6, workerAddress);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, WorkerInfo entity) {
        stmt.clearBindings();
 
        Long workerId = entity.getWorkerId();
        if (workerId != null) {
            stmt.bindLong(1, workerId);
        }
 
        String avatarPath = entity.getAvatarPath();
        if (avatarPath != null) {
            stmt.bindString(2, avatarPath);
        }
 
        String workerName = entity.getWorkerName();
        if (workerName != null) {
            stmt.bindString(3, workerName);
        }
 
        String workerBirthDay = entity.getWorkerBirthDay();
        if (workerBirthDay != null) {
            stmt.bindString(4, workerBirthDay);
        }
 
        String workerPhone = entity.getWorkerPhone();
        if (workerPhone != null) {
            stmt.bindString(5, workerPhone);
        }
 
        String workerAddress = entity.getWorkerAddress();
        if (workerAddress != null) {
            stmt.bindString(6, workerAddress);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public WorkerInfo readEntity(Cursor cursor, int offset) {
        WorkerInfo entity = new WorkerInfo( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // workerId
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // avatarPath
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // workerName
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // workerBirthDay
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // workerPhone
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5) // workerAddress
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, WorkerInfo entity, int offset) {
        entity.setWorkerId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setAvatarPath(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setWorkerName(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setWorkerBirthDay(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setWorkerPhone(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setWorkerAddress(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(WorkerInfo entity, long rowId) {
        entity.setWorkerId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(WorkerInfo entity) {
        if(entity != null) {
            return entity.getWorkerId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(WorkerInfo entity) {
        return entity.getWorkerId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
