package com.leon.carfixfactory.beanDao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.leon.carfixfactory.bean.AccessoriesInfo;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "ACCESSORIES_INFO".
*/
public class AccessoriesInfoDao extends AbstractDao<AccessoriesInfo, Long> {

    public static final String TABLENAME = "ACCESSORIES_INFO";

    /**
     * Properties of entity AccessoriesInfo.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property AccessoryId = new Property(0, Long.class, "accessoryId", true, "_id");
        public final static Property RepairId = new Property(1, Long.class, "repairId", false, "REPAIR_ID");
        public final static Property AccessoryName = new Property(2, String.class, "accessoryName", false, "ACCESSORY_NAME");
        public final static Property AccessoryPrice = new Property(3, String.class, "accessoryPrice", false, "ACCESSORY_PRICE");
        public final static Property AccessoryCount = new Property(4, int.class, "accessoryCount", false, "ACCESSORY_COUNT");
    }


    public AccessoriesInfoDao(DaoConfig config) {
        super(config);
    }
    
    public AccessoriesInfoDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"ACCESSORIES_INFO\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: accessoryId
                "\"REPAIR_ID\" INTEGER," + // 1: repairId
                "\"ACCESSORY_NAME\" TEXT," + // 2: accessoryName
                "\"ACCESSORY_PRICE\" TEXT," + // 3: accessoryPrice
                "\"ACCESSORY_COUNT\" INTEGER NOT NULL );"); // 4: accessoryCount
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"ACCESSORIES_INFO\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, AccessoriesInfo entity) {
        stmt.clearBindings();
 
        Long accessoryId = entity.getAccessoryId();
        if (accessoryId != null) {
            stmt.bindLong(1, accessoryId);
        }
 
        Long repairId = entity.getRepairId();
        if (repairId != null) {
            stmt.bindLong(2, repairId);
        }
 
        String accessoryName = entity.getAccessoryName();
        if (accessoryName != null) {
            stmt.bindString(3, accessoryName);
        }
 
        String accessoryPrice = entity.getAccessoryPrice();
        if (accessoryPrice != null) {
            stmt.bindString(4, accessoryPrice);
        }
        stmt.bindLong(5, entity.getAccessoryCount());
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, AccessoriesInfo entity) {
        stmt.clearBindings();
 
        Long accessoryId = entity.getAccessoryId();
        if (accessoryId != null) {
            stmt.bindLong(1, accessoryId);
        }
 
        Long repairId = entity.getRepairId();
        if (repairId != null) {
            stmt.bindLong(2, repairId);
        }
 
        String accessoryName = entity.getAccessoryName();
        if (accessoryName != null) {
            stmt.bindString(3, accessoryName);
        }
 
        String accessoryPrice = entity.getAccessoryPrice();
        if (accessoryPrice != null) {
            stmt.bindString(4, accessoryPrice);
        }
        stmt.bindLong(5, entity.getAccessoryCount());
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public AccessoriesInfo readEntity(Cursor cursor, int offset) {
        AccessoriesInfo entity = new AccessoriesInfo( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // accessoryId
            cursor.isNull(offset + 1) ? null : cursor.getLong(offset + 1), // repairId
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // accessoryName
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // accessoryPrice
            cursor.getInt(offset + 4) // accessoryCount
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, AccessoriesInfo entity, int offset) {
        entity.setAccessoryId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setRepairId(cursor.isNull(offset + 1) ? null : cursor.getLong(offset + 1));
        entity.setAccessoryName(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setAccessoryPrice(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setAccessoryCount(cursor.getInt(offset + 4));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(AccessoriesInfo entity, long rowId) {
        entity.setAccessoryId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(AccessoriesInfo entity) {
        if(entity != null) {
            return entity.getAccessoryId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(AccessoriesInfo entity) {
        return entity.getAccessoryId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
