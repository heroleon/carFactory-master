package com.leon.carfixfactory.beanDao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.leon.carfixfactory.bean.ContactsInfo;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "CONTACTS_INFO".
*/
public class ContactsInfoDao extends AbstractDao<ContactsInfo, Long> {

    public static final String TABLENAME = "CONTACTS_INFO";

    /**
     * Properties of entity ContactsInfo.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Name = new Property(1, String.class, "name", false, "NAME");
        public final static Property Phone_number = new Property(2, String.class, "phone_number", false, "PHONE_NUMBER");
        public final static Property Home_number = new Property(3, String.class, "home_number", false, "HOME_NUMBER");
        public final static Property Duty = new Property(4, String.class, "duty", false, "DUTY");
        public final static Property Note = new Property(5, String.class, "note", false, "NOTE");
        public final static Property SortKey = new Property(6, String.class, "sortKey", false, "SORT_KEY");
    }


    public ContactsInfoDao(DaoConfig config) {
        super(config);
    }
    
    public ContactsInfoDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"CONTACTS_INFO\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"NAME\" TEXT," + // 1: name
                "\"PHONE_NUMBER\" TEXT," + // 2: phone_number
                "\"HOME_NUMBER\" TEXT," + // 3: home_number
                "\"DUTY\" TEXT," + // 4: duty
                "\"NOTE\" TEXT," + // 5: note
                "\"SORT_KEY\" TEXT);"); // 6: sortKey
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"CONTACTS_INFO\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, ContactsInfo entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(2, name);
        }
 
        String phone_number = entity.getPhone_number();
        if (phone_number != null) {
            stmt.bindString(3, phone_number);
        }
 
        String home_number = entity.getHome_number();
        if (home_number != null) {
            stmt.bindString(4, home_number);
        }
 
        String duty = entity.getDuty();
        if (duty != null) {
            stmt.bindString(5, duty);
        }
 
        String note = entity.getNote();
        if (note != null) {
            stmt.bindString(6, note);
        }
 
        String sortKey = entity.getSortKey();
        if (sortKey != null) {
            stmt.bindString(7, sortKey);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, ContactsInfo entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(2, name);
        }
 
        String phone_number = entity.getPhone_number();
        if (phone_number != null) {
            stmt.bindString(3, phone_number);
        }
 
        String home_number = entity.getHome_number();
        if (home_number != null) {
            stmt.bindString(4, home_number);
        }
 
        String duty = entity.getDuty();
        if (duty != null) {
            stmt.bindString(5, duty);
        }
 
        String note = entity.getNote();
        if (note != null) {
            stmt.bindString(6, note);
        }
 
        String sortKey = entity.getSortKey();
        if (sortKey != null) {
            stmt.bindString(7, sortKey);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public ContactsInfo readEntity(Cursor cursor, int offset) {
        ContactsInfo entity = new ContactsInfo( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // name
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // phone_number
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // home_number
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // duty
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // note
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6) // sortKey
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, ContactsInfo entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setName(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setPhone_number(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setHome_number(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setDuty(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setNote(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setSortKey(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(ContactsInfo entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(ContactsInfo entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(ContactsInfo entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
